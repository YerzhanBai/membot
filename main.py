import telebot
import schedule
import threading
import time
import random
import csv
import os
from datetime import datetime
from flask import Flask
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# üîê –¢–æ–∫–µ–Ω –∏ –∫–∞–Ω–∞–ª
BOT_TOKEN = "7451657734:AAHNlKGH6YT2BRErXZV9Y619z7xD1GOY6Qs"
CHANNEL_ID = "@golosbota"

# üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞
LAUNCH_DATE = datetime(2025, 5, 11)

bot = telebot.TeleBot(BOT_TOKEN)

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render –∏ UptimeRobot
app = Flask(__name__)

@app.route('/')
def home():
    return 'Bot is running!'

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# üîÑ –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
def get_dataset_file():
    days_since_start = (datetime.now() - LAUNCH_DATE).days
    return "memes_month2.csv" if days_since_start >= 30 else "memes.csv"

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–º–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_memes():
    filename = get_dataset_file()
    memes = []
    try:
        with open(filename, newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            memes = [row['text'] for row in reader if row['text'].strip()]
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    return memes

# üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–º–∞ –≤ –∫–∞–Ω–∞–ª
def post_meme():
    memes = load_memes()
    if memes:
        meme = random.choice(memes)
        bot.send_message(CHANNEL_ID, meme)
        print(f"[‚úì] –ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {meme}")
    else:
        print("[!] –ú–µ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

# üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞
schedule.every().day.at("09:00").do(post_meme)
schedule.every().day.at("17:30").do(post_meme)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

# üì© –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—É–±–ª–∏–∫—É—é –º–µ–º—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –∏ 17:30 üïí\n–•–æ—á–µ—à—å –º–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? –ù–∞–ø–∏—à–∏ /meme"
    )

# üé≤ –ö–æ–º–∞–Ω–¥–∞ /meme —Å –∫–Ω–æ–ø–∫–æ–π
@bot.message_handler(commands=['meme'])
def send_random_meme(message):
    memes = load_memes()
    if memes:
        meme = random.choice(memes)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîÑ –ï—â—ë –º–µ–º", callback_data="new_meme"))
        bot.send_message(message.chat.id, meme, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ú–µ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")

# üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ï—â—ë –º–µ–º"
@bot.callback_query_handler(func=lambda call: call.data == "new_meme")
def callback_new_meme(call):
    memes = load_memes()
    if memes:
        new_meme = random.choice(memes)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîÑ –ï—â—ë –º–µ–º", callback_data="new_meme"))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=new_meme,
            reply_markup=markup
        )

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    threading.Thread(target=run_scheduler).start()
    bot.polling()
